	Proces		-	instanta a unui program in executie
			-	abstract entity, defined by kernel, to which
				the system allocates resources in order of execution
			-	from Kernel POV: a process consist of user-space memory
				containing program code and variables used by that code and
				a range of kernel data structures to mantaion the state of the process
		
	Program		-	fisier ce contine o multitudine de informatii care descriu
				va avea loc constructia de proces(e) la runtime
	Binary Format 
	Identifier	- 	fiecare program contine metainformatii despre cum va trebui
				sa fie rulat, informatii utile kernelului, facandu-se 
				astfel apelurile de sistem corecte
	Unix 
	executables	-	use the COFF(Common Object File Format) because it has:
				-	Machine-Language instructions
				-	Program entry-point address
				-	Data
				-	Symbolic and realocation tables
				-	Shared-Library and dynamic-linking information
				-	other info
	
	Process ID and Parent Process ID
		-	each process has a process ID (PID), a positive integer that
			uniquely identifies the process in the system
		-	init, parent of all processes, has the PID = 1
		-	maximum process IDs : 32767 = 2^15
		-	once it has reached 32767, it is being reset to 300
		-	tree-like relationship between processes and parents
		If a process is being orphaned by it's parent, the init process 
		with the pid 1 becomes it's parent

	Memory Layout of a Process
		-	memory allocated to each process is composed of a number of parts
			usually referred as segments.
		-	the segments:
			-	text segment: machine-language instructions of the program run by the process
				-	read-only
				-	sharable so that a single copy of the code can be mapped into the
					virtual memory of all processes
			-	initialized data segment: global and static variables
			-	uninitialized data segment: global and static variables that are not
					explicitly initialized
				-	the system initialized this segment all with 0s
				-	called bss
			-	stack:	dynamically growing and shrinking segment containing stack frames.
				-	one stack frame is allocated for each called function
				-	frame: local variables, arguments, return value
			-	heap:	area from whihc memory can be dynamically allocated at run-time.
				-	top of the heap is called the program break.
		
	Virtual Memory Management
		-	make efficient use of both the CPU and RAM by exploiting a property that
			is typical ni most programs: locality of referrence
		-	two kinds of locality:
			-	Spatial locality:	tendency of a program to reference memory
				addresses that are near those that were recently accessed
			-	Temporal locality:	tendency to access the same memory addresses 
				in the near future that it accessed in the recent past (because of loops)
		Process virtual address space -> Page Table -> Physical Memory (RAM) (page frames)

	State of a Process
		-	process changes state when executing
		-	state of a process:
			-	New:		Being created
			-	Running:	Instructions are being executed
			-	Waiting:	The process is waiting for some event to occur
			-	Ready:		The process is waiting to be assigner to a processor

		Diagram:	new -> ready -> running --> terminated
	   of process state		     |  	 |
					     +< waiting <+

	Process Control Block
		-	each process is represented in the operating system by a PCB
			also called a task control block
		-	components:
			-	process state
			-	process number
			-	program counter
			-	registers
			-	memory limits
			-	list of open files
	
		-	CPU-scheduling information
			-	priority
			-	pointers to scheduling queues
		-	Memory-management information
	
	Threads
		-	a process can have multiple threads of execution 
			for performing multiple tasks at the same time
	
	Process Scheduling
		-	selects an available process (from a set) for
			program execution on a core
		-	each core can run one process at a time
		-	process control block in Linux is represented by
			the C structure task_struct, which is found in
			<include/linux/sched.h>
		-	man sched
			-	main components:
			long state;
			struct sched entity se;
			struct task struct *parent;
			struct list head children;
			struct files struct *files;
			struct mm struct *mm;
			/* state of the process */
			/* scheduling information */
			/* this process’s parent */
			/* this process’s children */
			/* list of open files */
			/* address space */	
















	 





































